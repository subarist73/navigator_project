import tkinter as tk
from tkinter import ttk, messagebox
import requests
import folium
import webview
import os

# ===== –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim =====
def search_addresses(query):
    if not query or len(query) < 3:
        return []
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": query, "format": "json", "addressdetails": 1, "limit": 5}
    headers = {"User-Agent": "NavigatorApp/1.0 (support@example.com)"}
    try:
        r = requests.get(url, params=params, headers=headers, timeout=5)
        r.raise_for_status()
        data = r.json()
        return [(d["display_name"], float(d["lat"]), float(d["lon"])) for d in data]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", e)
        return []

# ===== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ OSRM =====
def get_route(lat1, lon1, lat2, lon2, mode="driving"):
    url = f"http://router.project-osrm.org/route/v1/{mode}/{lon1},{lat1};{lon2},{lat2}?overview=full&geometries=geojson"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json()
        if not data.get("routes"):
            return None, None, None
        coords = [(lat, lon) for lon, lat in data["routes"][0]["geometry"]["coordinates"]]
        distance_m = data["routes"][0]["distance"]   # –≤ –º–µ—Ç—Ä–∞—Ö
        duration_s = data["routes"][0]["duration"]   # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return coords, distance_m, duration_s
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞", str(e))
        return None, None, None

# ===== –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ =====
def show_map_with_route(point_a, point_b, name_a, name_b, mode="driving"):
    lat1, lon1 = point_a
    lat2, lon2 = point_b
    route, distance_m, duration_s = get_route(lat1, lon1, lat2, lon2, mode)
    if not route:
        return None, None

    m = folium.Map(location=[(lat1 + lat2)/2, (lon1 + lon2)/2], zoom_start=13)
    folium.Marker([lat1, lon1], popup=f"A: {name_a}", icon=folium.Icon(color='green')).add_to(m)
    folium.Marker([lat2, lon2], popup=f"B: {name_b}", icon=folium.Icon(color='red')).add_to(m)
    folium.PolyLine(route, color="blue", weight=5, opacity=0.8).add_to(m)

    map_path = "map_route.html"
    m.save(map_path)
    abs_path = os.path.abspath(map_path)
    webview.create_window("–ú–∞—Ä—à—Ä—É—Ç", f"file:///{abs_path.replace(os.sep, '/')}", width=1000, height=700)
    webview.start()

    return distance_m, duration_s

# ===== GUI =====
class NavigatorApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Navigator üöóüö∂‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÇÔ∏è")
        self.geometry("600x600")

        self.selected_a = None
        self.selected_b = None
        self.results_a = []
        self.results_b = []

        # –ü–æ–ª–µ A
        ttk.Label(self, text="–û—Ç–∫—É–¥–∞ (A):").pack(anchor="w", padx=10, pady=5)
        self.entry_a = ttk.Entry(self)
        self.entry_a.pack(fill="x", padx=10)
        self.entry_a.bind("<KeyRelease>", self.update_suggestions_a)
        self.listbox_a = tk.Listbox(self, height=5)
        self.listbox_a.pack(fill="x", padx=10)
        self.listbox_a.bind("<<ListboxSelect>>", self.select_address_a)

        # –ü–æ–ª–µ B
        ttk.Label(self, text="–ö—É–¥–∞ (B):").pack(anchor="w", padx=10, pady=5)
        self.entry_b = ttk.Entry(self)
        self.entry_b.pack(fill="x", padx=10)
        self.entry_b.bind("<KeyRelease>", self.update_suggestions_b)
        self.listbox_b = tk.Listbox(self, height=5)
        self.listbox_b.pack(fill="x", padx=10)
        self.listbox_b.bind("<<ListboxSelect>>", self.select_address_b)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        ttk.Label(self, text="–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:").pack(anchor="w", padx=10, pady=5)
        self.mode_var = tk.StringVar(value="driving")
        mode_options = ["driving", "foot", "bike"]
        self.mode_menu = ttk.OptionMenu(self, self.mode_var, mode_options[0], *mode_options)
        self.mode_menu.pack(padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        ttk.Button(self, text="üöó –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", command=self.build_route).pack(pady=15)

        # –í—ã–≤–æ–¥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        self.info_label = ttk.Label(self, text="", font=("Arial", 12), foreground="blue")
        self.info_label.pack(pady=10)

    # --------- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è A ---------
    def update_suggestions_a(self, event=None):
        query = self.entry_a.get().strip()
        self.listbox_a.delete(0, tk.END)
        self.results_a = search_addresses(query)
        for name, lat, lon in self.results_a:
            self.listbox_a.insert(tk.END, name)

    def select_address_a(self, event=None):
        if not self.listbox_a.curselection():
            return
        idx = self.listbox_a.curselection()[0]
        name, lat, lon = self.results_a[idx]
        self.selected_a = (lat, lon)
        self.entry_a.delete(0, tk.END)
        self.entry_a.insert(0, name)
        self.listbox_a.delete(0, tk.END)

    # --------- –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è B ---------
    def update_suggestions_b(self, event=None):
        query = self.entry_b.get().strip()
        self.listbox_b.delete(0, tk.END)
        self.results_b = search_addresses(query)
        for name, lat, lon in self.results_b:
            self.listbox_b.insert(tk.END, name)

    def select_address_b(self, event=None):
        if not self.listbox_b.curselection():
            return
        idx = self.listbox_b.curselection()[0]
        name, lat, lon = self.results_b[idx]
        self.selected_b = (lat, lon)
        self.entry_b.delete(0, tk.END)
        self.entry_b.insert(0, name)
        self.listbox_b.delete(0, tk.END)

    # --------- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ ---------
    def build_route(self):
        if not self.selected_a or not self.selected_b:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ –∞–¥—Ä–µ—Å–∞ (A –∏ B)")
            return
        name_a = self.entry_a.get()
        name_b = self.entry_b.get()
        mode = self.mode_var.get()
        self.withdraw()
        distance_m, duration_s = show_map_with_route(self.selected_a, self.selected_b, name_a, name_b, mode)
        self.deiconify()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
        if distance_m is not None and duration_s is not None:
            distance_km = distance_m / 1000
            hours = int(duration_s // 3600)
            minutes = int((duration_s % 3600) // 60)
            mode_texts = {"driving": "–ù–∞ –º–∞—à–∏–Ω–µ", "foot": "–ü–µ—à–∫–æ–º", "bike": "–ù–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ"}
            mode_text = mode_texts.get(mode, mode)
            self.info_label.config(
                text=f"–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞: {mode_text} | –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.2f} –∫–º | –í—Ä–µ–º—è: {hours} —á {minutes} –º–∏–Ω"
            )
        else:
            self.info_label.config(text="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ===== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
if __name__ == "__main__":
    app = NavigatorApp()
    app.mainloop()
